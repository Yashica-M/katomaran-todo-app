const passport = require('passport');
const GoogleStrategy = require('passport-google-oauth20').Strategy;
const jwt = require('jsonwebtoken');
const User = require('../models/User');
const dotenv = require('dotenv');
const path = require('path');
const fs = require('fs');

console.log('Loading environment variables in passport.js...');

// Get absolute path to .env file
const envPath = path.resolve(__dirname, '../.env');
console.log(`Looking for .env at: ${envPath}`);
console.log(`File exists: ${fs.existsSync(envPath)}`);

// Load environment variables with explicit path
dotenv.config({ path: envPath });

// Immediately log available credentials
console.log('Environment variables loaded in passport.js:');
console.log('GOOGLE_CLIENT_ID exists:', !!process.env.GOOGLE_CLIENT_ID);
console.log('GOOGLE_CLIENT_SECRET exists:', !!process.env.GOOGLE_CLIENT_SECRET);

// Configure Passport with Google Strategy
try {
  if (!process.env.GOOGLE_CLIENT_ID || !process.env.GOOGLE_CLIENT_SECRET) {
    throw new Error('Google OAuth credentials are not available in environment variables');
  }
  
  // Log credential hints (first/last few characters)
  const clientID = process.env.GOOGLE_CLIENT_ID;
  const clientSecret = process.env.GOOGLE_CLIENT_SECRET;
  
  console.log('ClientID preview:', clientID.substring(0, 5) + '...' + clientID.substring(clientID.length - 5));
  
  // Configure Google Strategy
  passport.use(
    new GoogleStrategy(
      {
        clientID,
        clientSecret,
        callbackURL: '/api/auth/google/callback',
        scope: ['profile', 'email'],
        proxy: true
      },
      async (accessToken, refreshToken, profile, done) => {
        try {
          console.log('Google authentication successful for:', profile.displayName);
          
          // Find if user already exists
          let user = await User.findOne({ googleId: profile.id });

          if (user) {
            // Update user info in case it changed
            user.name = profile.displayName;
            user.avatar = profile.photos && profile.photos[0] ? profile.photos[0].value : null;
            await user.save();
            
            return done(null, user);
          }

          // Create new user if doesn't exist
          user = await User.create({
            googleId: profile.id,
            name: profile.displayName,
            email: profile.emails && profile.emails[0] ? profile.emails[0].value : null,
            avatar: profile.photos && profile.photos[0] ? profile.photos[0].value : null,
          });

          return done(null, user);
        } catch (err) {
          console.error('Error in Google Auth:', err);
          return done(err, null);
        }
      }
    )
  );
  
  console.log('Google authentication strategy configured successfully');
} catch (error) {
  console.error('Failed to configure Google authentication strategy:', error.message);
}

// Serialize user for session
passport.serializeUser((user, done) => {
  done(null, user.id);
});

// Deserialize user from session
passport.deserializeUser(async (id, done) => {
  try {
    const user = await User.findById(id);
    done(null, user);
  } catch (err) {
    done(err, null);
  }
});

// Generate JWT token
const generateToken = (user) => {
  return jwt.sign(
    { id: user.id, email: user.email },
    process.env.JWT_SECRET || 'fallback_jwt_secret_key',
    { expiresIn: '7d' }
  );
};

// Export both the passport object and the generateToken function
module.exports = {
  passport,
  generateToken
};
